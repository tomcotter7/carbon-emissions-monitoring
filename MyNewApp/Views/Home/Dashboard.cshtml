@model DashboardViewModel
@{ ViewData["Title"] = "Dashboard"; }

<h1 style=
    "display: table;
    background-color: white; 
    margin: auto;
    text-align: center;
    font-weight: 700;
    font-family: sans-serif;
    text-decoration: underline">
    Dashboard
</h1>

<br />

<p style="display: table;
        background-color: white;
        text-align: center;
        margin: auto;
        font-family: sans-serif;
        font-size: 16px
    ">
    <span>
        This Dashboard can be used to check on the overall Plant activity
        as well as looking at specific machines. From an overview, you can
        see the daily report as to whether the plant was running as expected,
        or if emissions were at a higher rate for a certain day.
        <br />
        <br />
        To look more in-depth, you can click the machine buttons below and a
        graph will be displayed showing relevant information which would prove
        useful.
        <br />
        <br />
        Key for Buttons:
        <br />
        Grey: No Data pulled from historian.
        <br />
        Yellow: Warning, machine may have been powered off for a period in the 
                week, or may be running more than the average emission for 
                the week. View the graph for more details.
        <br />
        Green: Application is pulling data and machines are running as 
               expected.
    </span>
</p>

<br />

<div>

    <div id="entireplant"></div>

    <br />
    <br />
    <br />
    <br />
    <br />
    <br />

    <div id="dashboard"></div>

</div>

@section Styles {
    <style type="text/css">
        #chart-modal .modal-dialog {
            max-width: 90vw;
        }
    </style>
}

@section Scripts {
    <script src="~/lib/rxjs/rxjs.umd.min.js"></script>
    <script src="~/lib/Chart.js/Chart.bundle.min.js"></script>
    <script src="~/Scripts/dist/dashboard.js"></script>
    <script src="~/Scripts/dist/entireplant.js"></script>

    <script type="text/javascript">

  $(function () {
    let currentDataSource = '';
    let currentTagNameFilter = '';
    let currentPage = 1;

      // Whenever the selected data source changes,
      // the change will be emitted by this RxJS subject.
    const dataSourceSubject = new rxjs.Subject();
    const dataSource$ = dataSourceSubject
      .pipe(
        // Wait until a new data source is selected.
        rxjs.operators.distinctUntilChanged(),
        // Emit a filter that will search the new data source
        // with the current tag name filter.
        rxjs.operators.map(function (dsn) {
            currentDataSource = dsn;
            currentPage = 1;
            return {
                dataSourceName: currentDataSource,
                tagNameFilter: currentTagNameFilter,
                page: currentPage
            };
        })
      );

      // Whenever the tag name filter changes, the change
      // will be emitted by this RxJS subject.
    const tagNameFilterSubject = new rxjs.Subject();
    const tagNameFilter$ = tagNameFilterSubject
      .pipe(
        // After a new tag name filter is set, wait 300ms
        // in case the user is still typing.
        rxjs.operators.debounceTime(300),
        // Don't emit anything unless the value has changed.
        rxjs.operators.distinctUntilChanged(),
        // Emit a filter that will search the current data source
        // with the new tag name filter.
        rxjs.operators.map(function (filter) {
          currentTagNameFilter = filter;
          currentPage = 1;
          return {
            dataSourceName: currentDataSource,
            tagNameFilter: currentTagNameFilter,
            page: currentPage
          }
        })
      );

      // Whenever the results page for the tag search changes,
      // the change will be emitted by this RxJS subject.
    const pageSubject = new rxjs.Subject();
    const page$ = pageSubject
      .pipe(
        // Wait until the user pages forwards or backwards.
        rxjs.operators.distinctUntilChanged(),
        // Emit a filter that will search the current data source
        // with the current tag name filter, but with a different page number.
        rxjs.operators.map(function (page) {
          currentPage = page;
          return {
            dataSourceName: currentDataSource,
            tagNameFilter: currentTagNameFilter,
            page: currentPage
          }
        })
      );

    // Merge the data source, tag name, and page number streams together.
      const tagSearchSubscription = rxjs.merge(dataSource$, tagNameFilter$,
          page$)
      .pipe(
        // Wait until the composite search filter has changed.
        rxjs.operators.distinctUntilChanged(function (x, y) {
            return x.dataSourceName === y.dataSourceName && x.tagNameFilter
                === y.tagNameFilter && x.page === y.page;
        }),
        // Initial value for this observable.
        rxjs.operators.startWith({
          dataSourceName: currentDataSource,
          tagNameFilter: currentTagNameFilter,
          page: currentPage
        }),
        // Ignore items that don't have a data source name set.
        rxjs.operators.filter(function (f) {
          return f.dataSourceName ? true : false;
        }),
        // Call fetchTags for each composite search filter emitted
        // by the observable and emit the
        // result instead.
        rxjs.operators.switchMap(fetchTags),
        // Make the observable "hot".
        rxjs.operators.share()
      )
      .subscribe(function (next) {
        if (currentPage === 1) {
          // This is a new tag name filter or data source name;
          // replace the entire tag - container
          // element content.
          $('#tags-container').html(next.response);
        } else {
            // This is a new page of results for the current data
            // source name and tag name filter;
            // replace the load-next-page element with the results.
          $('#load-next-page').replaceWith(next.response);
        }
      });

    function fetchTags(filter) {
      // Perform a tag search and emit the results using an RxJS observable.
      return rxjs.ajax.ajax({
        method: 'post',
        url: '@Url.Action("FindTags")',
        headers: {
          'Content-Type': 'application/json'
        },
        body: {
          DataSourceName: filter.dataSourceName,
          TagNameFilter: filter.tagNameFilter,
          Page: filter.page
        },
        responseType: 'text'
      });
    }

    // Wire up data source name and tag name control event handlers.

    $('#DataSourceName').on('change', function () {
      $('#tag-name-filter').prop('disabled', false);
      dataSourceSubject.next($(this).val());
    });

    $('#tag-name-filter').on('keyup', function () {
      tagNameFilterSubject.next($(this).val());
    });

      // Loads the specified page number for the current
      // data source name and tag name filter.
    window.loadPage = function (page) {
      pageSubject.next(page);
    }

      // Loads and displays chart data for the specified
      // data source name and tag name.
    window.loadChart = function (dataSourceName, tagName) {
      chartDataSubject.next({
        dataSourceName: dataSourceName,
        tagName: tagName
      });
      }
  });
    </script>
}
